<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.wessm.mapper.StuMapper">
    <!--考生注册-->
    <insert id="registerStu" parameterType="stu">
    <![CDATA[
        insert into stu(s_no,s_password)
        values(#{sNo},#{sPassword})
    ]]>
    </insert>
    <!-- 考生登录-->
    <select id="findNoAndPass" resultType="stu" parameterType="stu">
        <![CDATA[
        select
            s_id  as sId,
            s_no  as  sNo,
            s_password as sPassword
        from
            stu
        where s_no=#{sNo}and s_password=#{sPassword}
     ]]>
    </select>
    <!-- 查询所有考生信息-->
    <select id="queryStu" resultType="stu">
        <![CDATA[
        select
            s_id as sId,
            s_no as sNo,
            s_name as sName,
            s_idcard as sIdcard,
            s_sex as sSex,
            s_birthday as sBirthday
        from
            stu
        ]]>
    </select>
    <!-- 根据考生id加载考生信息-->
    <select id="getStuSId"  resultType="stu" parameterType="int">
        <![CDATA[
        select
            s_no as sNo,
            s_name as sName,
            s_idcard as sIdcard,
            s_sex as sSex,
            s_birthday as sBirthday
        from
            stu
        where
            s_id=#{s_id}
       ]]>
    </select>
    <!-- 根据考生编号或名字或身份证号加载考生信息-->
    <select id="getStu"  resultType="stu" parameterType="java.util.Map">
        <![CDATA[
        select
            s_id as sId,
            s_no as sNo,
            s_name as sName,
            s_idcard as sIdcard,
            s_sex as sSex,
            s_birthday as sBirthday
        from
            stu
        where
            s_no=#{no} or s_name like #{name} or s_idcard=#{no}
       ]]>
    </select>
    <!-- 添加考生信息-->
    <insert id="insertStu" parameterType="stu">
      <![CDATA[
        insert into stu (
            s_no ,
            s_password,
            s_name ,
            s_idcard,
            s_sex ,
            s_birthday
        )
        values
        (
            #{sNo},
            #{sPassword},
            #{sName},
            #{sIdcard},
            #{sSex},
            #{sBirthday}
         )
      ]]>
    </insert>
    <!-- 根据考生ID删除考生记录-->
    <delete id="deleteStu" parameterType="int">
        <![CDATA[
        delete from stu
        where s_id=#{s_id}
      ]]>
    </delete>
    <!-- 根据考生ID修改考生信息-->
    <update id="updateStu" parameterType="stu">
    <![CDATA[
        update  stu
        set     s_no=#{sNo} ,
                s_name=#{sName} ,
                s_idcard=#{sIdcard} ,
                s_sex=#{sSex} ,
                s_birthday=#{sBirthday}
        where   s_id=#{sId}
     ]]>
    </update>
    <!-- 根据考生ID修改考生密码-->
    <update id="updateStuPassword" parameterType="stu">
    <![CDATA[
        update  stu
        set     s_password=#{sPassword}
        where   s_id=#{sId}
     ]]>
    </update>
    <!-- 查询男女考生的数量-->
    <select id="getSexnum"  resultType="java.util.Map">
        <![CDATA[
        SELECT
	count( CASE WHEN s_sex = '1' THEN s_sex END ) AS 'man',
	count( CASE WHEN s_sex = '2' THEN s_sex END ) AS 'woman'
FROM stu
	]]>
    </select>
    <!-- 查询男女考生不同年龄范围的人数-->
    <select id="getYearnum"  resultType="java.util.Map" parameterType="String">
        <![CDATA[
        SELECT
	count( CASE WHEN lij.nl < 9 THEN lij.nl END ) as '男1',
	count( CASE WHEN lij.nl BETWEEN 10 AND 12 THEN lij.nl END ) as '男2',
	count( CASE WHEN lij.nl BETWEEN 13 AND 15 THEN lij.nl END ) as '男3',
	count( CASE WHEN lij.nl BETWEEN 16 AND 18 THEN lij.nl END ) as '男4',
	count( CASE WHEN lij.nl BETWEEN 19 AND 21 THEN lij.nl END ) as '男5',
	count( CASE WHEN lij.nl BETWEEN 22 AND 25 THEN lij.nl END )as '男6'
FROM
	(
SELECT
	s_no,
	s_name,
	( YEAR ( now( ) ) - YEAR ( s_birthday ) ) AS nl
FROM
	stu
WHERE
	s_sex = #{sex}
	) AS lij
	]]>
    </select>
    <!-- 查询不同科目的最近5场考试的所有考生的平均分-->
    <select id="getAvgnum"  resultType="java.util.Map" parameterType="int">
    <![CDATA[
        SELECT
	e_id,
	pjf
FROM
	(
SELECT
	exam.e_id,
	avg( grade ) AS pjf,
	k_id
FROM
	grades
	LEFT JOIN exam ON exam.e_id = grades.e_id
GROUP BY
	e_id
	) AS lij
WHERE
	k_id = #{k_id}
GROUP BY
	e_id DESC
	LIMIT 5
	]]>
    </select>
</mapper>